#!/usr/bin/python
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

# This is a DOCUMENTATION stub specific to this module, it extends
# a documentation fragment located in ansible.utils.module_docs_fragments
from lavaclient import rest
from lavaclient import keystone_auth
from lavaclient import actions
from collections import namedtuple
import ConfigParser

DOCUMENTATION = '''
---
module: rax_cbd
short_description: create / delete a Big Data cluster in Rackspace Public Cloud
description:
     - creates / deletes a Rackspace Cloud Big Data cluster.
version_added: "1.0"
options:
  name:
    description:
      - Name to give the cluster
    default: null
  type:
    description:
      - Type of the cluster
    valid choices:
      - SPARK_HDP2_1
      - HADOOP_HDP1_3
      - HADOOP_HDP2_1
    default: HADOOP_HDP2_1
  flavor:
    description:
      - flavor of the cluster
    valid choices:
      - hadoop1-7
      - hadoop1-15
      - hadoop1-30
      - hadoop1-30
    default: hadoop1-7
  nodes:
    description:
      - Number of nodes in the cluster
    default: 2
  region:
    description:
      - Region where the cluster should be built
    default: DFW
  profile_username:
    description:
      - Username of the administration and login account for the cluster
    default: null
  profile_password:
    description:
      - Password of the administration and login account for the cluster
    default: null
  postinit_script:
    description:
      - URL of a bash script that would be executed on all cluster nodes after the cluster is build
    default: null
  state:
    description:
      - Indicate desired state of the resource
    choices:
      - present
      - absent
    default: present
  wait:
    description:
      - wait for the cluster to be in status 'ACTIVE' before returning
    default: "no"
    choices:
      - "yes"
      - "no"
  wait_timeout:
    description:
      - how long before wait gives up, in minutes
    default: 30
author: Alexandru Anghel
'''

EXAMPLES = '''
- name: Build a Cloud Big Data cluster
  gather_facts: False
  hosts: local
  connection: local
  tasks:
    - name: Cloud Big Data cluster create request
      local_action:
        module: rax_cbd
        credentials: ~/.raxpub
        name: my-test-cluster
        type: HADOOP_HDP2_1
        flavor: hadoop1-7
        region: LON
        profile_username: my-test-user
        profile_password: Asd123!@#
        wait: yes
        state: present
      register: my_cbd

    - debug: var=my_cbd
'''


def lava_auth(module, cloud_username, api_key, auth_url, region):

    auth = keystone_auth.KeystoneAuth()
    (token, lava_url) = auth.get_auth_token(username=cloud_username,
                                            api_key=api_key,
                                            url=auth_url,
                                            region=region,
                                            use_cache=False)

    if not token or not lava_url:
        module.fail_json(msg='Failed to authenticate. This '
                             'typically indicates an invalid region or an '
                             'incorrectly capitalized region name.')

    AuthInfo = namedtuple('AuthInfo', ['username', 'api_key', 'url',
                                       'update_cache', 'use_cache', 'auther', 'region'])
    auth_info = AuthInfo(username=cloud_username,
                         api_key=api_key,
                         url=auth_url,
                         use_cache=False,
                         update_cache=False,
                         auther=auth,
                         region=region)

    rest_client = rest.Client(lava_url, token, auth_info)
    return Client(rest_client)


def create_profile(module, lava_client, profile_username, profile_password,
                   cloud_username, api_key, sshkeyname, sshkey, sshkeyfile):
    class args:   # lava requires an object so creating a static class her
        limit = 0
    args.username = profile_username
    args.password = profile_password
    args.sshkeyname = sshkeyname
    args.sshkey = sshkey
    args.sshkeyfile = sshkeyfile
    args.cloudusername = cloud_username
    args.cloudapikey = api_key

    try:
        actions.do_create_profile(args, lava_client)
    except Exception, e:
        module.fail_json(msg='Could not create lava profile.\nError is %s' % e)


def find_instance(module, lava_client, name):
    cluster_data = {}
    try:
        clusters = lava_client.clusters.list()
        if not clusters:
            return None
        for cluster in clusters:
            if name == cluster.name:
                cluster_data['status'] = cluster.status
                if cluster_data['status'] == "ACTIVE":
                    cluster_data['gateway'] = {
                        'name': cluster.gateway.name,
                        'public_v4_address': cluster.gateway.public_v4_address,
                        'private_v4_address': cluster.gateway.private_v4_address
                    }
                    cluster_data['namenode'] = {
                        'name': cluster.namenode.name,
                        'public_v4_address': cluster.namenode.public_v4_address,
                        'private_v4_address': cluster.namenode.private_v4_address
                    }
                    cluster_data['datanodes'] = []
                    for datanode in cluster.datanodes:
                        cluster_data['datanodes'].append(
                            {
                                'name': datanode.name,
                                'public_v4_address': datanode.public_v4_address,
                                'private_v4_address': datanode.private_v4_address
                            }
                        )
                break
    except Exception, e:
        module.fail_json(msg='Failed to get clusters list.\nError is %s' % e)

    return cluster_data


def save_instance(module, lava_client, name, type, flavor, nodes, wait, wait_timeout, postinit_script,
                  profile_username, profile_password, cloud_username, api_key, sshkeyname, sshkey, sshkeyfile):

    if int(wait_timeout) < 10:
        module.fail_json(msg='"wait_timeout" must be greater than or equal to 10')

    if nodes < 1:
        module.fail_json(msg='Number of nodes must be greater than or equal to 1')

    changed = False
    cluster_data = find_instance(module, lava_client, name)

    create_profile(module, lava_client, profile_username, profile_password,
                   cloud_username, api_key, sshkeyname, sshkey, sshkeyfile)

    if not cluster_data:
        try:
            lava_client.clusters.boot(name, type, nodes, flavor, postInitScript=postinit_script)
            changed = True
            time.sleep(10)
        except Exception, e:
            module.fail_json(msg='Failed to build cluster.\nError is %s' % e)
    elif cluster_data['status'] != "ACTIVE":
        module.fail_json(msg='A cluster with the same name already exists, but not in ACTIVE status')
    elif nodes != len(cluster_data['datanodes']):
        try:
            lava_client.clusters.resize(lava_client.clusters.id_for_name(name), nodes)
            changed = True
            time.sleep(10)
        except Exception, e:
            module.fail_json(msg='Failed to resize cluster.\nError is %s' % e)

    if wait and changed:
        try:
            cluster_id = lava_client.clusters.id_for_name(name)
            new_cluster = lava_client.clusters.get(cluster_id)
            remaining_wait_time = wait_timeout
            while remaining_wait_time > 0:
                if new_cluster.status == "ACTIVE" or new_cluster.status == "ERROR":
                    break
                remaining_wait_time -= 1
                time.sleep(60)
                new_cluster = lava_client.clusters.get(cluster_id)
            if new_cluster.status != 'ACTIVE':
                module.fail_json(msg='Cluster not in ACTIVE status.\nCurrent status: %s' % new_cluster.status)

            if postinit_script:
                while remaining_wait_time > 0:
                    if new_cluster.postInitScriptStatus == "SUCCEEDED" or new_cluster.postInitScriptStatus == "FAILED":
                        break
                    remaining_wait_time -= 1
                    time.sleep(60)
                    new_cluster = lava_client.clusters.get(cluster_id)
                if new_cluster.postInitScriptStatus != 'SUCCEEDED':
                    module.fail_json(msg='Cluster post Init Script not in SUCCEEDED status.\n'
                                         'Current status: %s' % new_cluster.postInitScriptStatus)

        except Exception, e:
            module.fail_json(msg='Failed to get cluster data.\nError is %s' % e)

    cluster_data = find_instance(module, lava_client, name)
    cluster_data['credentials'] = {
        'profile_username': profile_username,
        'profile_password': profile_password
    }
    result = dict(changed=changed, cluster=cluster_data)
    module.exit_json(**result)


def delete_instance(module, lava_client, name, wait, wait_timeout):

    if int(wait_timeout) < 5:
        module.fail_json(msg='"wait_timeout" must be greater than or equal to 5')

    changed = False
    cluster_data = find_instance(module, lava_client, name)
    if cluster_data:
        if cluster_data['status'] == "ACTIVE" or cluster_data['status'] == "ERROR":
            try:
                cluster_id = lava_client.clusters.id_for_name(name)
                lava_client.clusters.delete(cluster_id)
                changed = True
                time.sleep(10)
                cluster_data = find_instance(module, lava_client, name)
                if wait:
                    remaining_wait_time = wait_timeout
                    while remaining_wait_time > 0:
                        if not cluster_data:
                            break
                        remaining_wait_time -= 1
                        time.sleep(60)
                        cluster_data = find_instance(module, lava_client, name)

                    if cluster_data and cluster_data['status'] != 'DELETED':
                        module.fail_json(msg='Cluster still not DELETED after waiting.\n'
                                             'Current status: %s' % cluster_data['status'])
            except Exception, e:
                module.fail_json(msg='Failed to delete cluster.\nError is %s' % e)
        else:
            module.fail_json(msg='Cluster not in ACTIVE or ERROR status.\nCurrent status: %s' % cluster_data['status'])

    result = dict(changed=changed, cluster=cluster_data)
    module.exit_json(**result)


def main():
    argument_spec = dict(
        name=dict(type='str'),
        credentials=dict(type='str'),
        region=dict(type='str', default='DFW'),
        state=dict(default='present', choices=['present', 'absent']),
        type=dict(type='str', default='HADOOP_HDP2_1'),
        flavor=dict(type='str', default='hadoop1-7'),
        nodes=dict(type='int', default=2),
        profile_username=dict(type='str'),
        profile_password=dict(type='str'),
        postinit_script=dict(type='str'),
        sshkeyname=dict(type='str'),
        sshkey=dict(type='str'),
        sshkeyfile=dict(type='str'),
        wait=dict(type='bool', default=False),
        wait_timeout=dict(default=30),
        auth_url=dict(type='str', default="https://identity.api.rackspacecloud.com/v2.0")
    )

    module = AnsibleModule(
        argument_spec=argument_spec
    )

    name = module.params.get('name')
    credentials_file = module.params.get('credentials')
    region = module.params.get('region')
    state = module.params.get('state')
    type = module.params.get('type')
    flavor = module.params.get('flavor')
    nodes = int(module.params.get('nodes'))
    profile_username = module.params.get('profile_username')
    profile_password = module.params.get('profile_password')
    postinit_script = module.params.get('postinit_script')
    sshkeyname = module.params.get('sshkeyname')
    sshkey = module.params.get('sshkey')
    sshkeyfile = module.params.get('sshkeyfile')
    wait = module.params.get('wait')
    wait_timeout = int(module.params.get('wait_timeout'))
    auth_url = module.params.get('auth_url')

    cloud_username = ""
    api_key = ""

    if not name:
        module.fail_json(msg='The cluster name is required for this module')

    cfg = ConfigParser.SafeConfigParser()
    try:
        if not cfg.read(os.path.expanduser(credentials_file)):
            module.fail_json(msg='Could not read the credentials file')

        cloud_username = cfg.get("rackspace_cloud", "username")
        api_key = cfg.get("rackspace_cloud", "api_key", raw=True)
    except ConfigParser.Error as e:
        module.fail_json(msg='Credentials file not in the correct format.\nError is %s' % e.message)

    lava_client = lava_auth(module, cloud_username, api_key, auth_url, region)

    if state == "absent":
        delete_instance(module, lava_client, name, wait, wait_timeout)
    else:
        if sshkeyfile:
            sshkeyfile = os.path.expanduser(sshkeyfile)
        save_instance(module, lava_client, name, type, flavor, nodes, wait, wait_timeout, postinit_script,
                      profile_username, profile_password, cloud_username, api_key, sshkeyname, sshkey, sshkeyfile)


# import module snippets
from ansible.module_utils.basic import *
from lavaclient import *

### invoke the module
main()
